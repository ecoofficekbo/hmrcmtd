<?php

namespace EcoMtd;


class FraudPrevention
{
    // ORIGINATING DEVICE CONTSTANTS
    const MOBILE_APP_VIA_SERVER = 'MOBILE_APP_VIA_SERVER';
    const DESKTOP_APP_VIA_SERVER = 'DESKTOP_APP_VIA_SERVER';
    const WEB_APP_VIA_SERVER = 'WEB_APP_VIA_SERVER';
    const OTHER_VIA_SERVER = 'OTHER_VIA_SERVER';
    const BATCH_PROCESS_DIRECT = 'BATCH_PROCESS_DIRECT';
    const OTHER_DIRECT = 'OTHER_DIRECT';
    // END

    public $clientConnectionMethod = '';
    public $clientPublicIp = '';
    public $clientPublicIpTimestamp = '';
    public $clientPublicPort = '';
    public $clientDeviceId = '';
    public $clientUserIds = '';
    public $clientMacAddresses = '';
    public $clientTimezone = '';
    public $clientLocalIps = '';
    public $clientLocalIpsTimestamp = '';
    public $clientScreens = '';
    public $clientWindowSize = '';
    public $clientBrowserPlugins = '';
    public $clientBrowserJsUserAgent = '';
    public $clientBrowserDoNotTrack = '';
    public $clientMultiFactor = '';
    public $clientUserAgent = '';
    public $vendorVersion = '';
    public $vendorLicenseIds = '';
    public $vendorPublicIp = '';
    public $vendorForwarded = '';
    public $vendorProductName = '';

    private $availableClientHeaders = [ 'Connection-Method', 'Public-IP', 'Public-IP-Timestamp', 'Public-Port', 'Device-ID', 'User-IDs', 'MAC-Addresses', 'Timezone', 'Local-IPs', 'Local-IPs-Timestamp', 'Screens', 'Window-Size', 'User-Agent', 'Browser-Plugins', 'Browser-JS-User-Agent', 'Browser-Do-Not-Track', 'Multi-Factor' ];
    private $availableVendorHeaders = [ 'Version', 'License-IDs', 'Public-IP', 'Forwarded', 'Product-Name' ];

    /*
     * @return array Fraud Prevention Headers
     */
    public function getHeaders() {
        $headers = [];
        foreach ($this->availableClientHeaders as $availableHeader) {
            $name = 'Gov-Client-' . $availableHeader;
            $variableName = 'client'.str_replace('-', '', ucwords(strtolower($availableHeader), '-'));
            if ($this->{$variableName} != '') {
                $headers[$name] = $this->{$variableName};
            }
        }

        foreach ($this->availableVendorHeaders as $availableHeader) {
            $name = 'Gov-Vendor-' . $availableHeader;
            $variableName = 'vendor'.str_replace('-', '', ucwords(strtolower($availableHeader), '-'));
            //if ($this->{$variableName} != '') {
                $headers[$name] = $this->{$variableName};
            //}
        }
        return $headers;
    }

    /*
     * A string representing the connection method used for the request
     * One of the originating device constants defined at the top of this file
     *
     * @param string DESKTOP_APP_VIA_SERVER
     */
    public function setClientConnectionMethod($value) {
        $this->clientConnectionMethod = $value;
    }
    /*
     * The public IP address (IPv4 or IPv6) from which the originating device makes the request
     *
     * @param string '198.51.100.0'
     */
    public function setClientPublicIp($value) {
        $this->clientPublicIp = $value;
    }

    /*
     * A timestamp to show when Gov-Client-Public-Ip is collected
     *
     * @param string '2021-02-03T16:49:18.448Z'
     */
    public function setClientPublicIpTimestamp($value) {
        $this->clientPublicIpTimestamp = $value;
    }
    /*
     * The public TCP port that the originating device uses when initiating the request
     *
     * @param string '12345'
     */
    public function setClientPublicPort($value) {
        $this->clientPublicPort = $value;
    }
    /*
     * An identifier unique to an originating device. This should be generated by an application and persistently stored on the device.
     * The identifier should not expire
     *
     * @param string 'beec798b-b366-47fa-b1f8-92cede14a1ce'
    */
    public function setClientDeviceId($value) {
        $this->clientDeviceId = $value;
    }
    /*
     * A key-value data structure containing the user identifiers. The keys should indicate accounts the user holds.
     * The os field should contain the identifier of the user signed in on the originating device. Additional fields should contain the user’s identifiers with the vendor services involved in the request
     *
     * @param array List ['os' => 'alice_desktop', 'my-vendor' => 'alice_online_account']
     */
    public function setClientUserIds($value) {
        $this->clientUserIds = $this->getKeyValues($value);
    }
    /*
     * The local timezone of the originating device, expressed as UTC±<hh>:<mm>
     *
     * @param string 'UTC+01:00'
     */
    public function setClientTimezone($value) {
        $this->clientTimezone = $value;
    }
    /*
     * A list of all local IP addresses (IPv4 and IPv6) available to the originating device
     *
     * @param array List ['10.1.2.3','10.3.4.2']
     */
    public function setClientLocalIps($value) {
        $this->clientLocalIps = $this->getList($value);
    }
    /*
     * A timestamp to show when Gov-Client-Local-IPs is collected
     *
     * @param string '2021-02-03T16:49:18.448Z'
     */
    public function setClientLocalIpsTimestamp($value) {
        $this->clientLocalIpsTimestamp = $value;
    }
    /*
     * Information related to the originating device’s screens. The fields include:
     * width is the reported width of the screen, in pixels
     * height is the reported height of the screen, in pixels
     * scaling-factor is the reported scaling factor of the screen. For instance, high pixel density screens might have a scaling factor of 2, whereas standard definition screens might report a scaling factor of 1. If the scaling factor cannot be retrieved, leave this empty or omit it entirely.
     * colour-depth is the colour depth of the screen, in bits. If the colour depth cannot be retrieved, leave this empty or omit it entirely
     *
     * @param array KeyValueList [['width' => 1920, 'height' => 1080, 'scaling-factor' => 1, 'colour-depth' => 16],['width' => 3000, 'height' => 2000, 'scaling-factor' => 1.25, 'colour-depth' => null]]
     */
    public function setClientScreens($value) {
        $this->clientScreens = $this->getKeyValueList($value);
    }
    /*
     * The number of pixels of the window on the originating device in which the user initiated (directly or indirectly) the API call to HMRC
     *
     * @param array KeyValues ['width' => 1256, 'height' => 803]
     */
    public function setClientWindowSize($value) {
        $this->clientWindowSize = $this->getKeyValues($value);
    }
    /*
     * The list of MAC addresses available on the originating device
     *
     * @param array List of client MAC addresses ['ea:43:1a:5d:21:45','10:12:cc:fa:aa:32']
     */
    public function setClientMacAddresses($value) {
        $this->clientMacAddresses = $this->getList($value);
    }
    /*
     * A list of browser plugins on the originating device
     *
     * @param array List ['Shockwave Flash','Chromium PDF Viewer']
     */
    public function setClientBrowserPlugins($value) {
        $this->clientBrowserPlugins = $this->getList($value);
    }
    /*
     * JavaScript-reported user agent string from the originating device
     *
     * @param string 'Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405'
     */
    public function setClientBrowserJsUserAgent($value) {
        $this->clientBrowserJsUserAgent = $value;
    }
    /*
     * Whether the Do Not Track option is enabled on the browser.
     * It should be true if this option is enabled, false if it’s not. If it cannot be collected because the browser does not have or expose this feature, submit the header with an empty value or omit it entirely
     *
     * @param boolean
     */
    public function setClientBrowserDoNotTrack($value) {
        $this->clientBrowserDoNotTrack = $value;
    }
    /*
     * A list of key-value data structures containing details of the multi-factor authentication (MFA) statuses related to the API call. For each key-value data structure, the applicable fields are:
     * type is a tag describing the MFA method being used. The possible values are:
     * TOTP - The MFA was performed by accepting a time-based one-time password code
     * AUTH_CODE - The MFA was performed by sending an authorisation code to the user in some out-of-band channel, for example, by email or by SMS
     * OTHER - A different MFA method was used than the available values
     * timestamp is a UTC timestamp in the format yyyy-MM-ddThh:mmZ recording the time of the last successful prompt for this factor.
     * unique-reference identifies a single factor. For example, a salted-and-hashed phone number used for SMS or an identifier linked to a TOTP secret – but not the secret itself. The intention is to recognise the same factor being used across API calls
     *
     * @param array KeyValueList [['type' => 'AUTH_CODE', 'timestamp' => '2017-04-21T13:23:42Z', 'unique-reference' => 'c672b8d1ef56ed28'],['type' => 'TOTP', 'timestamp' => '2017-05-19T13:10:00Z', 'unique-reference' => 'ac73430ffdfd9']]
     */
    public function setClientMultiFactor($value) {
        $this->clientMultiFactor = $this->getKeyValueList($value);
    }
    /*
     * @param array $osArray KeyValueList of client operating system, like [['Mac' => 'OSX']] or [['Windows' => 'XP'],['Windows' => 'NT']]
     * @param array $deviceArray KeyValueList of client device manufacturer/models, like [['Apple' => 'iPhone7,2']] or [['Dell' => 'XPS15'],['Dell' => 'XPS13']]
     */
    public function setClientUserAgent($osArray = null, $deviceArray = null) {
        //$os = $device = '/';
        //if ($osArray) { $os = $this->getKeyValues($osArray, ' ', '/'); }
        //if ($deviceArray) { $device = $this->getKeyValues($deviceArray, ' ', '/'); }
        //$this->clientUserAgent = "$os ($device)";
        $string = '';
        foreach($osArray as $key => $value) {
            $string .= 'os-family='.rawurlencode(($key==''?'UNKNOWN':$key)).'&os-version='.rawurlencode(($value==''?'UNKNOWN':$value)).'&';
            break;
        }
        foreach($deviceArray as $key => $value) {
            $string .= 'device-manufacturer='. rawurlencode(($key==''?'UNKNOWN':$key)).'&device-model='.rawurlencode(($value==''?'UNKNOWN':$value)).'&';
            break;
        }
        $string = substr($string,0,-1);
        $this->clientUserAgent = $string;
    }

    /*
     * A key-value data structure of software versions involved in handling a request
     *
     * @param array KeyValue ['software-name' => 'version-number','software-name-2' => 'version-number-2']
     */
    public function setVendorVersion($value) {
        $this->vendorVersion = $this->getKeyValues($value);
    }
    /*
     * A key-value data structure of hashed license keys relating to the vendor software initiating the API request on the originating device
     *
     * @param array KeyValue ['software-name' => 'hashed-license-value','software-name-2' => 'hashed-license-value-2']
     */
    public function setVendorLicenseIds($value) {
        $this->vendorLicenseIds = $this->getKeyValues($value);
    }
    /*
     * The public IP address of the servers to which the originating device sent their requests.
     * This might be an IP address of a Web Application Firewall, a DDoS Protection Service,
     * or a load balancer that the vendor's DNS record resolves to
     *
     * @param string '203.0.113.6'
     */
    public function setVendorPublicIp($value) {
        $this->vendorPublicIp = $value;
    }
    /*
     * The name of the product marketed to end users
     *
     * @param string 'MySoftware'
     */
    public function setVendorProductName($value) {
        $this->vendorProductName = rawurlencode($value);
    }
    /*
     * A list that details hops over the internet between services that terminate TLS.
     * For each hop over the internet, a key-value data structure with a by and for field must be appended to the list.
     * The by field must be the server’s public IP address where it received the request.
     * The for field must be the requestor’s public IP address from which the vendor received the request.
     *
     * @param array KeyValueList [['by' => '33.252.57.234','for' => '57.4.28.41'],['by' => '188.87.76.95','for' => '209.210.136.84']]
     */
    public function setVendorForwarded($value) {
        $this->vendorForwarded = $this->getKeyValueList($value);
    }
    private function getKeyValues($array, $keySeparator = '&', $valueSeparator = '=') {
        $return = '';
        if (is_array($array)) {
            foreach ($array as $key => $value) {
                $return .= rawurlencode($key) . $valueSeparator . rawurlencode($value) . $keySeparator;
            }
            $return = substr($return, 0, -1);
        }
        return $return;
    }
    private function getKeyValueList($array, $keySeparator = '&', $listSeparator = ',', $valueSeparator = '=') {
        $return = '';
        foreach ($array as $object) {
            if (is_array($object)) {
                foreach ($object as $key => $value) {
                    $return .= rawurlencode($key) . $valueSeparator . rawurlencode($value) . $keySeparator;
                }
                $return = substr($return, 0, -1) . $listSeparator;
            }
        }
        $return = substr($return, 0, -1);
        return $return;
    }
    private function getList($array, $listSeparator = ',') {
        $return = '';
        if (is_array($array)) {
            foreach ($array as $item) {
                $return .= rawurlencode($item) . $listSeparator;
            }
            $return = substr($return, 0, -1);
        } else {
            $return = rawurlencode($array);
        }
        return $return;
    }
}